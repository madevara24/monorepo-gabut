package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"try-graphql/graph/generated"
	"try-graphql/internal/app/entity"
)

// Districts is the resolver for the districts field.
func (r *planetResolver) Districts(ctx context.Context, obj *entity.Planet) ([]*entity.PlanetDistrict, error) {
	// This will be called by GraphQL when requesting districts for a planet
	// We need to fetch all districts for this specific planet using the main resolver
	// Since we're using the entity directly, we can just return an empty slice and handle loading in the resolver
	// The obj parameter already contains the Planet entity

	// Get all districts for all planets
	_, districts, _, _, err := r.Resolver.planetDashboard.Execute(ctx, obj.UUID)
	if err != nil {
		return nil, err
	}

	// Filter districts for this planet and convert to pointers
	var result []*entity.PlanetDistrict
	for i := range districts {
		result = append(result, &districts[i])
	}

	return result, nil
}

// Features is the resolver for the features field.
func (r *planetResolver) Features(ctx context.Context, obj *entity.Planet) ([]*entity.PlanetaryFeature, error) {
	// Get all features
	_, _, _, features, err := r.Resolver.planetDashboard.Execute(ctx, obj.UUID)
	if err != nil {
		return nil, err
	}

	// Convert to pointers
	var result []*entity.PlanetaryFeature
	for i := range features {
		result = append(result, &features[i])
	}

	return result, nil
}

// Buildings is the resolver for the buildings field.
func (r *planetDistrictResolver) Buildings(ctx context.Context, obj *entity.PlanetDistrict) ([]*entity.PlanetBuilding, error) {
	// Get all buildings for all districts
	_, _, buildings, _, err := r.Resolver.planetDashboard.Execute(ctx, "")
	if err != nil {
		return nil, err
	}

	// Filter buildings for this district and convert to pointers
	var result []*entity.PlanetBuilding
	for i := range buildings {
		if buildings[i].DistrictUUID == obj.UUID {
			result = append(result, &buildings[i])
		}
	}

	return result, nil
}

// PlanetDashboard is the resolver for the planetDashboard field.
func (r *queryResolver) PlanetDashboard(ctx context.Context, planetUUID string) (*entity.Planet, error) {
	// This is the main query resolver
	planet, _, _, _, err := r.Resolver.planetDashboard.Execute(ctx, planetUUID)
	if err != nil {
		return nil, err
	}

	return planet, nil
}

// Planet returns generated.PlanetResolver implementation.
func (r *Resolver) Planet() generated.PlanetResolver { return &planetResolver{r} }

// PlanetDistrict returns generated.PlanetDistrictResolver implementation.
func (r *Resolver) PlanetDistrict() generated.PlanetDistrictResolver {
	return &planetDistrictResolver{r}
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type planetResolver struct{ *Resolver }
type planetDistrictResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
